
6 3
0 5 3 4 1 2 --->1
7 2
6 4 5 6 0 0 8 --->5
5 4
7 7 7 7 7 ---->1
6 2
5 6 7 6 7 5 ---> 3
6 3
5 6 7 6 7 5 ---> 2
7 2
0 9 5 6 0 6 8 ------> 1
7 2
0 9 0 10 0 9 9 -----> 3
7 2
0 9 0 9 0 9 9 ------> 5
7 2
9 9 9 9 9 0 0 ------> 3
7 2
9 9 9 9 9 9 9------>5
7 1
9 9 9 9 9 9 9 ----> 6
7 1
2 2 2 2 1 1 1 ----->3
7 2
2 2 2 2 1 1 1 ---->2
7 4
8 8 8 8 8 8 10 ---->3
7 2
8 8 8 10 8 8 8 ---->3
7 2
8 8 8 10 0 8 8 ----------->2
7 3
8 8 8 10 0 10 8 ----------->1
8 3
8 8 8 10 0 10 8 8 ---------> 5
8 3
8 8 8 9 0 10 8 8 ------->5
8 3
0 8 10 8 0 0 0 0 -------> 1
8 3
8 8 10 9 0 10 8 8 -------> 1
8 3
0 0 10 0 0 0 10 0 ------> 5
8 3
0 0 10 1 0 0 10 0 ------> 2
8 3
0 0 10 1 1 0 10 0 ------> 2
8 3
0 0 10 1 1 1 10 0 ----->4
8 3
1 10 0 0 0 0 10 0 -----> 0
8 3
8 0 2 9 0 0 10 0 ------> 5
11 3
8 0 2 9 0 0 10 0 0 10 0 ----> 8

1
5
1
3
1
3
5
3
5
6
6
3
2
3
3
3
2




// Nombre del alumno: Alberto Collado Mamblona
// Usuario del Juez: A17


#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>

using namespace std;

// funcioﾌ］ que resuelve el problema
long long resolver(vector<int> const &v, long long tiempo) {
	long long ret = 0;
	long long sumMax = 0;
	long long sumTot = 0;
	pair<int, long long> maxPun = { 0,0 }; //valor, posicion
	int maxPunAnt = 0;
	for (long long i = 0; i < tiempo; ++i) {
		sumTot += v[i];
		if (v[i] >= maxPun.first) {
			maxPunAnt = maxPun.first;
			maxPun.first = v[i];
			maxPun.second = i;
		}
	}

	long long a = 0;
	long long b = tiempo - 1;

	ret = a;
	sumMax = sumTot;
	b++;
	while (b < v.size()) {
		sumTot -= v[a];
		sumTot += v[b];
		if (v[b] >= maxPun.first) {
			maxPunAnt = maxPun.first;
			maxPun.first = v[b];
			maxPun.second = b;
		}

		if (sumMax <= sumTot && ((maxPun.second >= a+1 && maxPun.second <= b))) {
			maxPunAnt = maxPun.first;
			sumMax = sumTot;
			ret = a + 1;
		}
		else if (maxPunAnt < maxPun.first && (maxPun.second >= a+1 && maxPun.second <= b)) {
			//maxPunAnt = maxPun.first; //Quitar para que funcione
			sumMax = sumTot;
			ret = a + 1;
		}
		
		++b; ++a;
	}

	return ret;
}

// Resuelve un caso de prueba, leyendo de la entrada la
// configuracioﾌ］, y escribiendo la respuesta
bool resuelveCaso() {
	// leer los datos de la entrada
	long long numPag, tiempo;
	cin >> numPag >> tiempo;
	if (numPag == 0 && tiempo == 0)
		return false;

	vector<int> v(numPag);
	for (int &i : v)
		cin >> i;

	long long sol = resolver(v, tiempo);

	// escribir sol
	cout << sol << "\n";
	return true;

}

int main() {
	/*
	// Para la entrada por fichero.
	// Comentar para acepta el reto
	#ifndef DOMJUDGE
	std::ifstream in("datos.txt");
	auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
	#endif
	*/

	while (resuelveCaso());

	/*
	// Para restablecer entrada. Comentar para acepta el reto
	#ifndef DOMJUDGE // para dejar todo como estaba al principio
	std::cin.rdbuf(cinbuf);
	system("PAUSE");
	#endif
	*/

	return 0;
}


----------------------------------------------------------------------------------------------------------------------------------

// Nombre del alumno: Alberto Collado Mamblona
// Usuario del Juez: A17


#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>

using namespace std;

// funcioﾌ］ que resuelve el problema
int resolver(vector<int> const &v, int tiempo) {
	int ret = 0;
	int sumMax = 0;
	int sumTot = 0;
	pair<int, int> maxPun = { 0,0 }; //valor, posicion
	for (int i = 0; i < tiempo; ++i) {
		sumTot += v[i];
		if (v[i] >= maxPun.first) {
			maxPun.first = v[i];
			maxPun.second = i;
		}
	}

	int a = 0;
	int b = tiempo - 1;
	ret = a;
	sumMax = sumTot;
	++b;
	while (b < v.size()) {
		sumTot -= v[a];
		sumTot += v[b];
		if (v[b] >= maxPun.first) {
			if (sumTot >= sumMax) {
				sumMax = sumTot;
				ret = a+1;
			}
			else if(v[b] > maxPun.first)
				ret = a+1;

			maxPun.first = v[b];
			maxPun.second = b;
		}
		else if(sumTot >= sumMax && maxPun.second > a) {
			sumMax = sumTot;
			ret = a+1;
		}

		++b; ++a;
	}

	return ret;
}

// Resuelve un caso de prueba, leyendo de la entrada la
// configuracioﾌ］, y escribiendo la respuesta
bool resuelveCaso() {
	// leer los datos de la entrada
	int numPag, tiempo;
	cin >> numPag >> tiempo;
	if (numPag == 0 && tiempo == 0)
		return false;

	vector<int> v(numPag);
	for (int &i : v)
		cin >> i;

	int sol = resolver(v, tiempo);

	// escribir sol
	cout << sol << "\n";
	return true;

}

int main() {
	/*
	// Para la entrada por fichero.
	// Comentar para acepta el reto
	#ifndef DOMJUDGE
	std::ifstream in("datos.txt");
	auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
	#endif
	*/

	while (resuelveCaso());

	/*
	// Para restablecer entrada. Comentar para acepta el reto
	#ifndef DOMJUDGE // para dejar todo como estaba al principio
	std::cin.rdbuf(cinbuf);
	system("PAUSE");
	#endif
	*/

	return 0;
}
